{"componentChunkName":"component---gatsby-theme-mdx-deck-src-templates-deck-js","path":"/print","result":{"data":{"deck":{"id":"f2479f2e-b6b0-5b55-ab68-b9b2c6a303de","body":"var _excluded = [\"components\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar theme = nightOwl;\nvar _frontmatter = {};\nvar layoutProps = {\n  theme: theme,\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"What's new in React 18 ??\"), mdx(\"hr\", null), mdx(\"h3\", null, \"React 18\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Automatic Batching\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Concurrency\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"New hooks introduced\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"useId\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"useTransition\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"useDeferredValue\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Suspense\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Server Components\")), mdx(\"hr\", null), mdx(\"img\", {\n    src: tslide0,\n    width: \"80%\"\n  }), mdx(\"hr\", null), mdx(\"h2\", null, \"Automatic Batching\"), mdx(\"hr\", null), mdx(CodeSurfer, {\n    theme: nightOwl,\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-smalltalk\",\n    \"metastring\": \"title='Automatic Batching'\",\n    \"title\": \"'Automatic\",\n    \"Batching'\": true\n  }, \"We know that whenever there is a state update\\xA0, react does a re render. \\nBatching is when React groups multiple state updates in a single render for \\nperformance benefits.\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    theme: nightOwl,\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"\\nconst [count, setCount] = useState(0);\\nconst [isActive, setIsActive] = useState(false);\\n\\n\\n\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"\\nconst [count, setCount] = useState(0);\\nconst [isActive, setIsActive] = useState(false);\\n\\nfunction incrementCount(){\\n  \\n}\\n\\n<button onClick={incrementCount}>Count</button>\\n\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"\\nconst [count, setCount] = useState(0);\\nconst [isActive, setIsActive] = useState(false);\\n\\nfunction incrementCount(){\\n  setCount(count+1);\\n  setIsActive(!isActive);\\n}\\n\\n<button onClick={incrementCount}>Count</button>\\n\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"\\nconst [count, setCount] = useState(0);\\nconst [isActive, setIsActive] = useState(false);\\n\\nfunction incrementCount(){\\n  setTimeout(() => {\\n    setCount(count+1);\\n    setIsActive(!isActive);\\n  })\\n}\\n\\n<button onClick={incrementCount}>Count</button>\\n\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"\\nconst [count, setCount] = useState(0);\\nconst [isActive, setIsActive] = useState(false);\\n\\nfunction incrementCount(){\\n  fetch(('/someurl').then(() => {\\n    setCount(count+1);\\n    setIsActive(!isActive);\\n  })\\n}\\n\\n<button onClick={incrementCount}>Count</button>\\n\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"\\nconst [count, setCount] = useState(0);\\nconst [isActive, setIsActive] = useState(false);\\n\\nfunction incrementCount(){\\n  fetch(('/someurl').then(() => {\\n    // 2 rerenders before React 18\\n    // 1 rerender in React 18\\n    setCount(count+1);\\n    setIsActive(!isActive);\\n  })\\n}\\n\\n<button onClick={incrementCount}>Count</button>\\n\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    theme: nightOwl,\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-smalltalk\"\n  }, \"\\nIn React 18 , all state updates are batched out of the box irrespective of \\nhow they are called.\\n\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    theme: nightOwl,\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"function incrementCount(){\\n  flushSync(() => {\\n    setCount(count+1);\\n  })\\n  setIsActive(!isActive);\\n}\\n\"))), mdx(\"hr\", null), mdx(\"h2\", null, \"useId()\"), mdx(\"hr\", null), mdx(CodeSurfer, {\n    theme: nightOwl,\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-smalltalk\"\n  }, \"\\nuseId hook allows you to create unique ids which are consistent\\nacross server and client\\n\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-smalltalk\"\n  }, \"\\nuseId hook allows you to create unique ids which are consistent\\nacross server and client\\n\\nWe need unique ids for accessibility.\\n\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    theme: nightOwl,\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"\\nfunction Form(){\\n\\n\\n}\\n\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"\\nfunction Form(){\\n   return (\\n    <>\\n      <label>\\n        Password:\\n        <input\\n          type=\\\"password\\\"\\n          aria-describedby=\\\"password-hint\\\"\\n        />\\n      </label>\\n      <p id=\\\"password-hint\\\">\\n        The password should contain at least 8 characters\\n      </p>\\n    </>\\n  );\\n\\n}\\n\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"9,12 title='using hardcoded ids'\",\n    \"9,12\": true,\n    \"title\": \"'using\",\n    \"hardcoded\": true,\n    \"ids'\": true\n  }, \"\\nfunction Form(){\\n   return (\\n    <>\\n      <label>\\n        Password:\\n        <input\\n          type=\\\"password\\\"\\n          aria-describedby=\\\"password-hint\\\"\\n        />\\n      </label>\\n      <p id=\\\"password-hint\\\">\\n        The password should contain at least 8 characters\\n      </p>\\n    </>\\n  );\\n\\n}\\n\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"title='using Math.random()'\",\n    \"title\": \"'using\",\n    \"Math.random()'\": true\n  }, \"\\nfunction Form(){\\n   const randomId = Math.floor(Math.random() * 100);\\n\\n   return (\\n    <>\\n      <label>\\n        Password:\\n        <input\\n          type=\\\"password\\\"\\n          aria-describedby={randomId}\\n        />\\n      </label>\\n      <p id={randomId}>\\n        The password should contain at least 8 characters\\n      </p>\\n    </>\\n  );\\n\\n}\\n\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"title='using useId hook'\",\n    \"title\": \"'using\",\n    \"useId\": true,\n    \"hook'\": true\n  }, \"\\nimport {useId} from 'react'\\n\\nfunction Form(){\\n   const passwordHintId = useId();\\n\\n   return (\\n    <>\\n      <label>\\n        Password:\\n        <input\\n          type=\\\"password\\\"\\n          aria-describedby={passwordHintId}\\n        />\\n      </label>\\n      <p id={passwordHintId}>\\n        The password should contain at least 8 characters\\n      </p>\\n    </>\\n  );\\n\\n}\\n\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"title='using useId hook'\",\n    \"title\": \"'using\",\n    \"useId\": true,\n    \"hook'\": true\n  }, \"\\nimport {useId} from 'react'\\n\\nfunction Form(){\\n   const passwordHintId = useId();\\n\\n   return (\\n    <>\\n      <label>First Name:</label>\\n      <input type=\\\"text\\\" />\\n\\n      <label>Last Name:</label>\\n      <input type=\\\"text\\\" />\\n      <label>\\n        Password:\\n        <input\\n          type=\\\"password\\\"\\n          aria-describedby={passwordHintId}\\n        />\\n      </label>\\n      <p id={passwordHintId}>\\n        The password should contain at least 8 characters\\n      </p>\\n    </>\\n  );\\n\\n}\\n\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"title='using useId hook'\",\n    \"title\": \"'using\",\n    \"useId\": true,\n    \"hook'\": true\n  }, \"\\nimport {useId} from 'react'\\n\\nfunction Form(){\\n   const id = useId();\\n\\n   return (\\n    <>\\n      <label htmlFor={id + '-firstName'}>First Name:</label>\\n      <input id={id + '-firstName'} type=\\\"text\\\" />\\n      \\n      <label>Last Name:</label>\\n      <input id={id + '-lastName'} type=\\\"text\\\" />\\n      <label>\\n        Password:\\n        <input\\n          type=\\\"password\\\"\\n          aria-describedby={id + '-passwordHint'}\\n        />\\n      </label>\\n      <p id={id + '-passwordHint'}>\\n        The password should contain at least 8 characters\\n      </p>\\n    </>\\n  );\\n\\n}\\n\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    theme: nightOwl,\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-smalltalk\",\n    \"metastring\": \"title='How these ids look like'\",\n    \"title\": \"'How\",\n    \"these\": true,\n    \"ids\": true,\n    \"look\": true,\n    \"like'\": true\n  }, \"\\n- r0\\n- r1\\n- r3\\n\\n\"))), mdx(\"hr\", null), mdx(\"h2\", null, \"Concurrent React\"), mdx(\"hr\", null), mdx(CodeSurfer, {\n    theme: nightOwl,\n    title: \"`Concurrency`\",\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-html\"\n  }, \"\\n<body>\\n  <script src=\\\"A.js\\\"></script>\\n  <script src=\\\"B.js\\\"></script>\\n  <script src=\\\"C.js\\\"></script>\\n</body>\\n\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-html\"\n  }, \"\\n<body>\\n  <script src=\\\"A.js\\\" defer></script>\\n  <script src=\\\"B.js\\\"></script>\\n  <script src=\\\"C.js\\\"></script>\\n</body>\\n\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    theme: nightOwl,\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"setA('A')\\nsetB('B')\\nsetC('C')\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"1\": true,\n    \"className\": \"language-js\",\n    \"metastring\": \"1\"\n  }, \"setA('A')\\nsetB('B')\\nsetC('C')\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"2\": true,\n    \"className\": \"language-js\",\n    \"metastring\": \"2\"\n  }, \"setA('A')\\nsetB('B')\\nsetC('C')\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"3\": true,\n    \"className\": \"language-js\",\n    \"metastring\": \"3\"\n  }, \"setA('A')\\nsetB('B')\\nsetC('C')\\n\"))), mdx(\"hr\", null), mdx(\"h3\", null, \"React can pause, interrupt or abandon a render\"), mdx(\"hr\", null), mdx(Demo1, {\n    mdxType: \"Demo1\"\n  }), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: [nightOwl, nightOwl],\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"\\nconst [filter, setFilter] = useState('')\\n\\nconst [filteredItems, setFilteredItems] = \\nuseState(dummyItems);\\n\\n\\n\\n\")), mdx(Demo1, {\n    mdxType: \"Demo1\"\n  })), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"\\nconst [filter, setFilter] = useState('')\\n\\nconst [filteredItems, setFilteredItems] = \\nuseState(dummyItems);\\n\\nreturn (\\n  <div>\\n    <input onChange={filterItems} />\\n    <ul>\\n      {filteredItems.map((item) => (\\n        <li>{item}</li>\\n      ))}\\n    </ul>\\n  </div>\\n);\\n\\n\\n\")), mdx(Demo1, {\n    mdxType: \"Demo1\"\n  })), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"\\nconst [filter, setFilter] = useState('')\\n\\nconst [filteredItems, setFilteredItems] = \\nuseState(dummyItems);\\n\\nconst filterItems = (e) => {\\n  const value = e.target.value;\\n  const filteredItems = dummyItems.filter(\\n    (item) => item.includes(value)\\n  );\\n\\n  setFilter(value);\\n  setFilteredItems([...filteredItems]);\\n};\\n\\nreturn (\\n  <div>\\n    <input onChange={filterItems} />\\n    <ul>\\n      {filteredItems.map((item) => (\\n        <li>{item}</li>\\n      ))}\\n    </ul>\\n  </div>\\n);\\n\\n\")), mdx(Demo1, {\n    mdxType: \"Demo1\"\n  }))), mdx(\"hr\", null), mdx(\"h3\", null, \"useTransition\"), mdx(\"h3\", null, \"useDeferredValue\"), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: [nightOwl, nightOwl],\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"\\nconst [filter, setFilter] = useState('')\\n\\nconst [filteredItems, setFilteredItems] = \\nuseState(dummyItems);\\n\\nconst filterItems = (e) => {\\n  const value = e.target.value;\\n  const filteredItems = dummyItems.filter(\\n    (item) => item.includes(value)\\n  );\\n\\n  setFilter(value);\\n  setFilteredItems([...filteredItems]);\\n};\\n\\n\\n\")), mdx(Demo2, {\n    mdxType: \"Demo2\"\n  })), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"\\nconst [filter, setFilter] = useState('')\\n\\nconst [filteredItems, setFilteredItems] = \\nuseState(dummyItems);\\n\\nconst [isPending, startTransition] = useTransition();\\n\\nconst filterItems = (e) => {\\n  const value = e.target.value;\\n  const filteredItems = dummyItems.filter(\\n    (item) => item.includes(value)\\n  );\\n\\n  setFilter(value);\\n  setFilteredItems([...filteredItems]);\\n};\\n\\n\\n\")), mdx(Demo2, {\n    mdxType: \"Demo2\"\n  })), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"\\nconst [filter, setFilter] = useState('')\\n\\nconst [filteredItems, setFilteredItems] = \\nuseState(dummyItems);\\n\\nconst [isPending, startTransition] = useTransition();\\n\\nconst filterItems = (e) => {\\n  const value = e.target.value;\\n  const filteredItems = dummyItems.filter(\\n    (item) => item.includes(value)\\n  );\\n  setFilter(value);\\n  startTransition(() => {\\n    setFilteredItems([...filteredItems]);\\n  })\\n  \\n};\\n\\n\\n\")), mdx(Demo2, {\n    mdxType: \"Demo2\"\n  })), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"\\nconst [filter, setFilter] = useState('')\\n\\nconst [filteredItems, setFilteredItems] = \\nuseState(dummyItems);\\n\\nconst [isPending, startTransition] = useTransition();\\n\\nconst filterItems = (e) => {\\n  const value = e.target.value;\\n  const filteredItems = dummyItems.filter(\\n    (item) => item.includes(value)\\n  );\\n  setFilter(value);\\n  startTransition(() => {\\n    setFilteredItems([...filteredItems]);\\n  })\\n  \\n};\\n\\nreturn (\\n  <div>\\n    <input onChange={filterItems} />\\n    {isPending ? (\\n        <div>Loading...</div>\\n      ) : (\\n        <ul>\\n          {filteredItems.map((item) => (\\n            <li>{item}</li>\\n          ))}\\n        </ul>\\n      )\\n    }\\n  </div>\\n);\\n\\n\")), mdx(Demo2, {\n    mdxType: \"Demo2\"\n  })), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"\\nconst [filter, setFilter] = useState('')\\n\\nconst [filteredItems, setFilteredItems] = \\nuseState(dummyItems);\\n\\nconst [isPending, startTransition] = useTransition();\\n\\nconst filterItems = (e) => {\\n  const value = e.target.value;\\n  const filteredItems = dummyItems.filter(\\n    (item) => item.includes(value)\\n  );\\n  setFilter(value);\\n  startTransition(() => {\\n    setFilteredItems([...filteredItems]);\\n  })\\n  \\n};\\n\\nreturn (\\n  <div>\\n    <input onChange={filterItems} />\\n    {isPending ? (\\n        <div>Loading...</div>\\n      ) : (\\n        <ul>\\n          {filteredItems.map((item) => (\\n            <li>{item}</li>\\n          ))}\\n        </ul>\\n      )\\n    }\\n  </div>\\n);\\n\\n\")), mdx(Demo3, {\n    mdxType: \"Demo3\"\n  })), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"\\nconst [filter, setFilter] = useState('')\\n\\nconst [filteredItems, setFilteredItems] = \\nuseState(dummyItems);\\n\\nconst [isPending, startTransition] = useTransition();\\n\\nconst filterItems = (e) => {\\n  const value = e.target.value;\\n  const filteredItems = dummyItems.filter(\\n    (item) => item.includes(value)\\n  );\\n  setFilter(value);\\n  startTransition(() => {\\n    setFilteredItems([...filteredItems]);\\n  })\\n  \\n};\\n\\nreturn (\\n  <div>\\n    <input onChange={filterItems} />\\n      <ul style={{ opacity: isPending ? 0.5 : 1}}>\\n        {filteredItems.map((item) => (\\n          <li>{item}</li>\\n        ))}\\n      </ul>\\n    }\\n  </div>\\n);\\n\\n\")), mdx(Demo3, {\n    mdxType: \"Demo3\"\n  }))), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: [nightOwl, vsDark],\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"\\nconst [filter, setFilter] = useState('')\\n\\nconst [filteredItems, setFilteredItems] = \\nuseState(dummyItems);\\n\\nconst filterItems = (e) => {\\n  const value = e.target.value;\\n  const filteredItems = dummyItems.filter(\\n    (item) => item.includes(value)\\n  );\\n  \\n  setFilter(value);\\n  setFilteredItems([...filteredItems]);\\n  \\n};\\n\\nreturn (\\n  <div>\\n    <input onChange={filterItems} />\\n    <ItemsList items={filteredItems} />\\n  </div>\\n);\\n\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"\\nexport const ItemsList = ({ items }) => {\\n\\n  return (\\n    <ul>\\n      {items.map((item, index) => (\\n        <li key={index}>{item}</li>\\n      ))}\\n    </ul>\\n  );\\n};\\n\\n\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"\\nconst [filter, setFilter] = useState('')\\n\\nconst [filteredItems, setFilteredItems] = \\nuseState(dummyItems);\\n\\nconst filterItems = (e) => {\\n  const value = e.target.value;\\n  const filteredItems = dummyItems.filter(\\n    (item) => item.includes(value)\\n  );\\n  \\n  setFilter(value);\\n  setFilteredItems([...filteredItems]);\\n  \\n};\\n\\nreturn (\\n  <div>\\n    <input onChange={filterItems} />\\n    <ItemsList items={filteredItems} />\\n  </div>\\n);\\n\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"\\nexport const ItemsList = ({ items }) => {\\n\\n  const deferredItems = useDeferredValue(items)\\n\\n  return (\\n    <ul>\\n      {deferredItems.map((item, index) => (\\n        <li key={index}>{item}</li>\\n      ))}\\n    </ul>\\n  );\\n};\\n\\n\\n\")))), mdx(\"hr\", null), mdx(UseDeferredValueDemo1, {\n    mdxType: \"UseDeferredValueDemo1\"\n  }), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: [nightOwl, vsDark],\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"\\nfunction App(){\\n\\n  const [value, setValue] = useState(0)\\n\\n  return (\\n    <div>\\n      <button\\n        onClick={() => {\\n          setValue((prevValue) => prevValue + 1);\\n        }}\\n      >\\n        {value}\\n      </button>\\n\\n      <ItemList value={value} />\\n     \\n    </div>\\n  );\\n}\\n\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"\\nconst ItemList = ({ value }) => {\\n   \\n  const result = Array(90000)\\n    .fill(1)\\n    .map((_, index) => {\\n        return <li key={index}>{value+index}</li>\\n     });\\n  return <ul>{result}</ul>;\\n};\\n\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"\\nfunction App(){\\n\\n  const [value, setValue] = useState(0)\\n  const deferredValue = useDeferredValue(value)\\n\\n  return (\\n    <div>\\n      <button\\n        onClick={() => {\\n          setValue((prevValue) => prevValue + 1);\\n        }}\\n      >\\n        {value}\\n      </button>\\n\\n      <ItemList value={value} />\\n     \\n    </div>\\n  );\\n}\\n\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"\\nconst ItemList = ({ value }) => {\\n   \\n  const result = Array(90000)\\n    .fill(1)\\n    .map((_, index) => {\\n        return <li key={index}>{value+index}</li>\\n     });\\n  return <ul>{result}</ul>;\\n};\\n\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"\\nfunction App(){\\n\\n  const [value, setValue] = useState(0)\\n  const deferredValue = useDeferredValue(value)\\n\\n  return (\\n    <div>\\n      <button\\n        onClick={() => {\\n          setValue((prevValue) => prevValue + 1);\\n        }}\\n      >\\n        {value}\\n      </button>\\n\\n      <ItemList value={deferredValue} />\\n     \\n    </div>\\n  );\\n}\\n\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"\\nconst ItemList = ({ value }) => {\\n   \\n  const result = Array(90000)\\n    .fill(1)\\n    .map((_, index) => {\\n        return <li key={index}>{value+index}</li>\\n     });\\n  return <ul>{result}</ul>;\\n};\\n\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"\\nconst MemoedList = React.memo(ItemList);\\n\\nfunction App(){\\n\\n  const [value, setValue] = useState(0)\\n  const deferredValue = useDeferredValue(value)\\n\\n  return (\\n    <div>\\n      <button\\n        onClick={() => {\\n          setValue((prevValue) => prevValue + 1);\\n        }}\\n      >\\n        {value}\\n      </button>\\n\\n      <MemoedList value={deferredValue} />\\n     \\n    </div>\\n  );\\n}\\n\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"\\nconst ItemList = ({ value }) => {\\n   \\n  const result = Array(90000)\\n    .fill(1)\\n    .map((_, index) => {\\n        return <li key={index}>{value+index}</li>\\n     });\\n  return <ul>{result}</ul>;\\n};\\n\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"\\nconst MemoedList = React.memo(ItemList);\\n\\nfunction App(){\\n\\n  const [value, setValue] = useState(0)\\n  const deferredValue = useDeferredValue(value)\\n  const isPending = deferredValue !== value\\n\\n  return (\\n    <div>\\n      <button\\n        onClick={() => {\\n          setValue((prevValue) => prevValue + 1);\\n        }}\\n      >\\n        {value}\\n      </button>\\n\\n      <div\\n        style={{\\n          opacity: isPending ? 0.5 : 1,\\n        }}\\n      >\\n        <MemoedList value={deferredValue} />\\n      </div>\\n     \\n    </div>\\n  );\\n}\\n\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"\\nconst ItemList = ({ value }) => {\\n   \\n  const result = Array(90000)\\n    .fill(1)\\n    .map((_, index) => {\\n        return <li key={index}>{value+index}</li>\\n     });\\n  return <ul>{result}</ul>;\\n};\\n\\n\")))), mdx(\"hr\", null), mdx(Demo4, {\n    mdxType: \"Demo4\"\n  }), mdx(\"hr\", null), mdx(CodeSurfer, {\n    theme: nightOwl,\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-smalltalk\"\n  }, \"\\nBoth useTransition and useDeferredValue give same results \\nbut useDeferred value is used when you don't have control over the\\nstate update of a value you want to defer.\\n\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-smalltalk\"\n  }, \"\\nBoth useTransition and useDeferredValue give same results \\nbut useDeferred value is used when you don't have control over the\\nstate update of a value you want to defer.\\n\\nuseDeferredValue and useTransition does an extra rerender. \\n\\n\"))), mdx(\"hr\", null), mdx(\"h2\", null, \"Suspense\"), mdx(\"hr\", null), mdx(CodeSurfer, {\n    theme: nightOwl,\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-smalltalk\"\n  }, \"\\nSuspense lets you specify the loading state for a part of the\\ncomponent tree if it's not yet ready to be displayed\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    theme: nightOwl,\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Displaying fallback for lazy loaded component\\\"\",\n    \"title\": \"\\\"Displaying\",\n    \"fallback\": true,\n    \"for\": true,\n    \"lazy\": true,\n    \"loaded\": true,\n    \"component\\\"\": true\n  }, \"\\nfunction App(){\\n  \\n}\\n\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Displaying fallback for lazy loaded component\\\"\",\n    \"title\": \"\\\"Displaying\",\n    \"fallback\": true,\n    \"for\": true,\n    \"lazy\": true,\n    \"loaded\": true,\n    \"component\\\"\": true\n  }, \"\\nfunction App(){\\n  const Profile = React.lazy(() => import(\\\"./Profile\\\"));\\n  \\n}\\n\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Displaying fallback for lazy loaded component\\\"\",\n    \"title\": \"\\\"Displaying\",\n    \"fallback\": true,\n    \"for\": true,\n    \"lazy\": true,\n    \"loaded\": true,\n    \"component\\\"\": true\n  }, \"\\nfunction App(){\\n  const Profile = React.lazy(() => import(\\\"./Profile\\\"));\\n\\n  return (\\n        <Profile />\\n  )\\n}\\n\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Displaying fallback for lazy loaded component\\\"\",\n    \"title\": \"\\\"Displaying\",\n    \"fallback\": true,\n    \"for\": true,\n    \"lazy\": true,\n    \"loaded\": true,\n    \"component\\\"\": true\n  }, \"\\nfunction App(){\\n  const Profile = React.lazy(() => import(\\\"./Profile\\\"));\\n\\n  return (\\n      <Suspense fallback={<Loading />}>\\n        <Profile />\\n      </Suspense>\\n  )\\n}\\n\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Data Fetching\\\"\",\n    \"title\": \"\\\"Data\",\n    \"Fetching\\\"\": true\n  }, \"\\nfunction App(){\\n  const Profile = React.lazy(() => import(\\\"./Profile\\\"));\\n\\n  return (\\n      <Suspense fallback={<Loading />}>\\n        <Profile />\\n      </Suspense>\\n  )\\n}\\n\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Data Fetching\\\"\",\n    \"title\": \"\\\"Data\",\n    \"Fetching\\\"\": true\n  }, \"\\nfunction Posts(){\\n\\n}\\n\\nfunction App(){\\n  const Profile = React.lazy(() => import(\\\"./Profile\\\"));\\n\\n  return (\\n      <Suspense fallback={<Loading />}>\\n        <Profile />\\n      </Suspense>\\n  )\\n}\\n\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Data Fetching\\\"\",\n    \"title\": \"\\\"Data\",\n    \"Fetching\\\"\": true\n  }, \"\\nfunction Posts(){\\n  const posts = fetchPosts('/posts');\\n\\n}\\n\\nfunction App(){\\n  const Profile = React.lazy(() => import(\\\"./Profile\\\"));\\n\\n  return (\\n      <Suspense fallback={<Loading />}>\\n        <Profile />\\n      </Suspense>\\n  )\\n}\\n\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Data Fetching\\\"\",\n    \"title\": \"\\\"Data\",\n    \"Fetching\\\"\": true\n  }, \"\\nfunction Posts(){\\n  const posts = fetchPosts('/posts');\\n  return posts.map((post) => <div>{post.title}</div>)\\n}\\n\\nfunction App(){\\n  const Profile = React.lazy(() => import(\\\"./Profile\\\"));\\n\\n  return (\\n      <Suspense fallback={<Loading />}>\\n        <Profile />\\n      </Suspense>\\n  )\\n}\\n\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Data Fetching\\\"\",\n    \"title\": \"\\\"Data\",\n    \"Fetching\\\"\": true\n  }, \"\\nfunction Posts(){\\n  const posts = fetchPosts('/posts');\\n  return posts.map((post) => <div>{post.title}</div>)\\n}\\n\\nfunction App(){\\n  const Profile = React.lazy(() => import(\\\"./Profile\\\"));\\n\\n  return (\\n      <Suspense fallback={<Loading />}>\\n        <Profile />\\n        <Posts />\\n      </Suspense>\\n  )\\n}\\n\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Data Fetching\\\"\",\n    \"title\": \"\\\"Data\",\n    \"Fetching\\\"\": true\n  }, \"\\nfunction Posts(){\\n  const posts = fetchPosts('/posts');\\n  return posts.map((post) => <div>{post.title}</div>)\\n}\\n\\nfunction App(){\\n  const Profile = React.lazy(() => import(\\\"./Profile\\\"));\\n\\n  return (\\n      <Suspense fallback={<Loading />}>\\n        <Profile />\\n        <Suspense fallback='Loading posts..'>\\n          <Posts />\\n        </Suspense>\\n      </Suspense>\\n  )\\n}\\n\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"3\": true,\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Data Fetching\\\" 3\",\n    \"title\": \"\\\"Data\",\n    \"Fetching\\\"\": true\n  }, \"\\nfunction Posts(){\\n  const posts = fetchPosts('/posts');\\n  return posts.map((post) => <div>{post.title}</div>)\\n}\\n\\nfunction App(){\\n  const Profile = React.lazy(() => import(\\\"./Profile\\\"));\\n\\n  return (\\n      <Suspense fallback={<Loading />}>\\n        <Profile />\\n        <Suspense fallback='Loading posts..'>\\n          <Posts />\\n        </Suspense>\\n      </Suspense>\\n  )\\n}\\n\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Data Fetching\\\"\",\n    \"title\": \"\\\"Data\",\n    \"Fetching\\\"\": true\n  }, \"\\nfunction Posts(){\\n  const posts = fetchPosts('/posts');\\n  return posts.map((post) => <div>{post.title}</div>)\\n}\\n\\nfunction App(){\\n  const Profile = React.lazy(() => import(\\\"./Profile\\\"));\\n\\n  return (\\n      <Suspense fallback={<Loading />}>\\n        <Profile />\\n        <Suspense fallback='Loading posts..'>\\n          <Posts />\\n        </Suspense>\\n      </Suspense>\\n  )\\n}\\n\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"title=\\\"Data Fetching\\\"\",\n    \"title\": \"\\\"Data\",\n    \"Fetching\\\"\": true\n  }, \"\\nfunction Posts(){\\n  const posts = fetchPosts('/posts');\\n  return posts.map((post) => <div>{post.title}</div>)\\n}\\n\\nfunction App(){\\n  const Profile = React.lazy(() => import(\\\"./Profile\\\"));\\n\\n  return (\\n    <ErrorBoundary fallback={<Error />}>\\n      <Suspense fallback={<Loading />}>\\n        <Profile />\\n        <Suspense fallback='Loading posts..'>\\n          <Posts />\\n        </Suspense>\\n      </Suspense>\\n    </ErrorBoundary>\\n  )\\n  \\n}\\n\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    theme: nightOwl,\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-smalltalk\"\n  }, \"Before React 18 suspense was only used for code splitting and only supported on client.\\nHowever now it also supports server side rendering with streaming\\n\"))), mdx(\"hr\", null), mdx(\"img\", {\n    src: suspense1,\n    width: \"80%\"\n  }), mdx(\"hr\", null), mdx(\"img\", {\n    src: suspense2,\n    width: \"80%\"\n  }), mdx(\"hr\", null), mdx(\"img\", {\n    src: suspense3,\n    width: \"80%\"\n  }), mdx(\"hr\", null), mdx(\"img\", {\n    src: suspense4,\n    width: \"80%\"\n  }), mdx(\"hr\", null), mdx(\"h2\", null, \"React Server Components\"), mdx(ReactLogo, {\n    mdxType: \"ReactLogo\"\n  }), mdx(\"hr\", null), mdx(\"img\", {\n    src: tslide1,\n    width: \"80%\"\n  }), mdx(\"hr\", null), mdx(\"img\", {\n    src: tslide2,\n    width: \"80%\"\n  }), mdx(\"hr\", null), mdx(\"img\", {\n    src: tslide3,\n    width: \"80%\"\n  }), mdx(\"hr\", null), mdx(\"img\", {\n    src: tslide4,\n    width: \"80%\"\n  }), mdx(\"hr\", null), mdx(\"img\", {\n    src: tslide7,\n    width: \"80%\"\n  }), mdx(\"hr\", null), mdx(\"img\", {\n    src: tslide8,\n    width: \"80%\"\n  }), mdx(\"hr\", null), mdx(\"img\", {\n    src: tslide5,\n    width: \"80%\"\n  }), mdx(\"hr\", null), mdx(\"img\", {\n    src: tslide6,\n    width: \"80%\"\n  }), mdx(\"hr\", null), mdx(\"img\", {\n    src: islide0\n  }), mdx(\"hr\", null), mdx(\"img\", {\n    src: islide1,\n    width: \"80%\"\n  }), mdx(\"hr\", null), mdx(\"img\", {\n    src: islide2,\n    width: \"80%\"\n  }), mdx(\"hr\", null), mdx(\"img\", {\n    src: islide3,\n    width: \"80%\"\n  }), mdx(\"hr\", null), mdx(\"img\", {\n    src: islide4,\n    width: \"80%\"\n  }), mdx(\"hr\", null), mdx(\"img\", {\n    src: islide5,\n    width: \"80%\"\n  }), mdx(\"hr\", null), mdx(\"img\", {\n    src: islide6,\n    width: \"80%\"\n  }), mdx(\"hr\", null), mdx(\"img\", {\n    src: islide7,\n    width: \"80%\"\n  }), mdx(\"hr\", null), mdx(\"img\", {\n    src: islide8,\n    width: \"80%\"\n  }), mdx(\"hr\", null), mdx(\"img\", {\n    src: what,\n    height: \"70%\",\n    width: \"70%\"\n  }), mdx(\"hr\", null), mdx(\"img\", {\n    src: islide9\n  }), mdx(\"hr\", null), mdx(\"h3\", null, \"Shopify Hydrogen\"), mdx(\"hr\", null), mdx(\"img\", {\n    src: islide10\n  }), mdx(\"hr\", null), mdx(\"h3\", null, \"Configurations needed\"), mdx(\"hr\", null), mdx(CodeSurfer, {\n    theme: nightOwl,\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"\\nnpm install next@canary react@rc react-dom@rc\\n\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    theme: nightOwl,\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"\\n// next.config.js\\nmodule.exports = {\\n  experimental: {\\n    runtime: 'edge',\\n    serverComponents: true,\\n  },\\n}\\n\\n\"))), mdx(\"hr\", null), mdx(\"h3\", null, \"Create React Server Component\"), mdx(\"hr\", null), mdx(\"img\", {\n    src: slide18,\n    width: \"90%\"\n  }), mdx(\"hr\", null), mdx(CodeSurfer, {\n    theme: nightOwl,\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"file='./components/App.js'\",\n    \"file\": \"'./components/App.js'\"\n  }, \"// App.js\\nexport default function App(){\\n    return (\\n      <>\\n        <EmailList />\\n        <EmailBody />\\n      </>\\n    )\\n}\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    theme: nightOwl,\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"export default function EmailList() {\\n\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"export default function EmailList() {\\n  const emails = fetch(`/emails/${userId}`)\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"export default function EmailList() {\\n  const emails = fetch(`/emails/${userId}`)\\n\\n  return (\\n    <div>\\n      {emails.map(email => {\\n\\n      })}\\n    </div>\\n  )\\n  \\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"export default function EmailList() {\\n  const emails = fetch(`/emails/${userId}`)\\n  \\n  return (\\n    <div>\\n      {emails.map(email => {\\n        const { name, email, subject, description, date } = email\\n        return (\\n            <div>\\n                <div>{name}{email}</div>\\n                <div>{subject}</div>\\n                <div>{description}</div>\\n                <div>{date}</div>\\n            </div>\\n          )\\n      })}\\n    </div>\\n  )\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"import { format } from 'date-fns'\\nexport default function EmailList() {\\n  const emails = fetch(`/emails/${userId}`)\\n  \\n  return (\\n    <div>\\n      {emails.map(email => {\\n        const { name, email, subject, description, date } = email\\n        return (\\n            <div>\\n                <div>{name}{email}</div>\\n                <div>{subject}</div>\\n                <div>{description}</div>\\n                <div>{format(date)}</div>\\n            </div>\\n          )\\n      })}\\n    </div>\\n  )\\n}\\n\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"1:25\",\n    \"1:25\": true\n  }, \"\\n//EmailList.js\\n\\nimport { format } from 'date-fns'\\n\\nexport default function EmailList() {\\n  const emails = fetch(`/emails/${userId}`)\\n  \\n  return (\\n    <div>\\n      {emails.map(email => {\\n        const { name, email, subject, description, date } = email\\n        return (\\n            <div>\\n                <div>{name}{email}</div>\\n                <div>{subject}</div>\\n                <div>{description}</div>\\n                <div>{format(date)}</div>\\n            </div>\\n          )\\n      })}\\n    </div>\\n  )\\n}\\n\\n\"))), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: [nightOwl, vsDark],\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"1:12,22:24\",\n    \"1:12,22:24\": true\n  }, \"\\n//EmailListContainer.js\\n\\nimport { format } from 'date-fns'\\n\\nexport default function EmailList() {\\n  const emails = fetch(`/emails/${userId}`)\\n  \\n  return (\\n    <div>\\n      {emails.map(email => {\\n        const { name, email, subject, description, date } = email\\n        return (\\n            <div>\\n                <div>{name}{email}</div>\\n                <div>{subject}</div>\\n                <div>{description}</div>\\n                <div>{format(date)}</div>\\n            </div>\\n          )\\n      })}\\n    </div>\\n  )\\n}\\n\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"\\n// EmailListView.js\\n\\nexport default function EmailListView(props){\\n\\n  const {name, email, subject, description, date} = props\\n\\n  return (\\n    <div>\\n        <div>{name}{email}</div>\\n        <div>{subject}</div>\\n        <div>{description}</div>\\n        <div>{date}</div>\\n    </div>\\n  )\\n}\\n\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"1:12,22:24\",\n    \"1:12,22:24\": true\n  }, \"\\n//EmailListContainer.server.js\\n\\nimport { format } from 'date-fns'\\n\\nexport default function EmailList() {\\n  const emails = fetch(`/emails/${userId}`)\\n  \\n  return (\\n    <div>\\n      {emails.map(email => {\\n        const { name, email, subject, description, date } = email\\n        return (\\n            <div>\\n                <div>{name}{email}</div>\\n                <div>{subject}</div>\\n                <div>{description}</div>\\n                <div>{format(date)}</div>\\n            </div>\\n          )\\n      })}\\n    </div>\\n  )\\n}\\n\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\",\n    \"metastring\": \"1:16\",\n    \"1:16\": true\n  }, \"\\n// EmailListView.client.js\\n\\nexport default function EmailListView(props){\\n\\n  const {name, email, subject, description, date} = props\\n\\n  return (\\n    <div>\\n        <div>{name}{email}</div>\\n        <div>{subject}</div>\\n        <div>{description}</div>\\n        <div>{date}</div>\\n    </div>\\n  )\\n}\\n\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"\\n//EmailListContainer.server.js\\n\\nimport { format } from 'date-fns'\\nimport EmailListView from './EmailListView.client.js'\\n\\nexport default function EmailList() {\\n  const emails = fetch(`/emails/${userId}`)\\n  \\n  return (\\n    <div>\\n      {emails.map(email => {\\n        const { name, email, subject, description, date } = email\\n        return (\\n            <EmailListView\\n              name={name}\\n              subject={subject}\\n              description={description}\\n              date={format(date)}\\n            />\\n          )\\n      })}\\n    </div>\\n  )\\n}\\n\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"\\n// EmailListView.client.js\\n\\nexport default function EmailListView(props){\\n\\n  const {name, email, subject, description, date} = props\\n\\n  return (\\n    <div>\\n        <div>{name}{email}</div>\\n        <div>{subject}</div>\\n        <div>{description}</div>\\n        <div>{date}</div>\\n    </div>\\n  )\\n}\\n\\n\")))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    theme: nightOwl,\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"\\n// EmailListContainer.server.js\\n\\nimport { format } from 'date-fns'\\nimport EmailListView from './EmailListView.client.js'\\n\\nexport default function EmailList() {\\n  const emails = fetch(`/emails/${userId}`)\\n  \\n  return (\\n    <div>\\n      {emails.map(email => {\\n        const { name, email, subject, description, date } = email\\n        return (\\n            <EmailListView\\n              name={name}\\n              subject={subject}\\n              description={description}\\n              date={format(date)}\\n            />\\n          )\\n      })}\\n    </div>\\n  )\\n}\\n\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"\\n// EmailListContainer.server.js\\n\\nimport { format } from 'date-fns'\\nimport EmailListView from './EmailListView.client.js'\\n\\nexport default function EmailList() {\\n  const emails = db.query(`${query}`)\\n  \\n  return (\\n    <div>\\n      {emails.map(email => {\\n        const { name, email, subject, description, date } = email\\n        return (\\n            <EmailListView\\n              name={name}\\n              subject={subject}\\n              description={description}\\n              date={format(date)}\\n            />\\n          )\\n      })}\\n    </div>\\n  )\\n}\\n\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"\\n// EmailListContainer.server.js\\n\\nimport { format } from 'date-fns'\\nimport EmailListView from './EmailListView.client.js'\\n\\nexport default function EmailList() {\\n  const emails = fs.readFile('emailData.js')\\n  \\n  return (\\n    <div>\\n      {emails.map(email => {\\n        const { name, email, subject, description, date } = email\\n        return (\\n            <EmailListView\\n              name={name}\\n              subject={subject}\\n              description={description}\\n              date={format(date)}\\n            />\\n          )\\n      })}\\n    </div>\\n  )\\n}\\n\\n\"))), mdx(\"hr\", null), mdx(\"img\", {\n    src: whenUse,\n    width: \"70%\"\n  }), mdx(\"hr\", null), mdx(\"img\", {\n    src: slide20\n  }), mdx(\"hr\", null), mdx(\"img\", {\n    src: slide19,\n    width: \"40%\"\n  }), mdx(\"hr\", null), mdx(\"h3\", null, \"Challenges\"), mdx(\"hr\", null), mdx(\"img\", {\n    src: slide1\n  }), mdx(\"hr\", null), mdx(CodeSurfer, {\n    theme: nightOwl,\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"\\nexport default function MyClientComponent() {\\n    return (\\n        <div>\\n            This code is rendered on the client\\n        </div>\\n    );\\n}\\n\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"\\nimport MyServerComponent from './MyServerComponent.server.js'\\nexport default function MyClientComponent() {\\n    return (\\n        <div>\\n            This code is rendered on the client\\n            <MyServerComponent />\\n        </div>\\n    );\\n}\\n\\n\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"\\nexport default function MyClientComponent({children}) {\\n    return (\\n        <div>\\n            This code is rendered on the client\\n            {children}\\n        </div>\\n    );\\n}\\n\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    theme: nightOwl,\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-js\"\n  }, \"\\nexport default function MyContainerServerComponent() {\\n    return (\\n        <MyClientComponent >\\n            <MyServerComponent />\\n        </MyClientComponent>\\n    );\\n}\\n\\n\"))), mdx(\"hr\", null), mdx(\"img\", {\n    src: slide2\n  }), mdx(\"hr\", null), mdx(\"img\", {\n    src: slide3,\n    width: \"80%\"\n  }), mdx(\"hr\", null), mdx(\"img\", {\n    src: slide13,\n    width: \"70%\",\n    height: \"70%\"\n  }), mdx(\"hr\", null), mdx(\"img\", {\n    src: slide14\n  }), mdx(\"hr\", null), mdx(\"img\", {\n    src: slide15\n  }), mdx(\"hr\", null), mdx(\"img\", {\n    src: slide16\n  }), mdx(\"hr\", null), mdx(\"img\", {\n    src: slide17\n  }), mdx(\"hr\", null), mdx(\"img\", {\n    src: thanks\n  }));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"f2479f2e-b6b0-5b55-ab68-b9b2c6a303de","slug":"","title":"What's new in React 18 ??"}},"staticQueryHashes":[]}